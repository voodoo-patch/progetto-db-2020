BEGIN;

-- CREATE DATABASE comingsoon;

CREATE TYPE content_type AS ENUM ('film', 'serie TV', 'programma');

CREATE TABLE utente (
    username varchar(50) NOT NULL,
    nome varchar(100) NOT NULL,
    email varchar(100) NOT NULL,
    password varchar(50) NOT NULL,
    data_inizio_collaborazione timestamp  NULL,
    data_fine_collaborazione timestamp  NULL 
        CHECK (data_inizio_collaborazione IS NULL OR data_fine_collaborazione IS NULL OR data_fine_collaborazione > data_inizio_collaborazione),
    CONSTRAINT pk_utente PRIMARY KEY (username)
);

CREATE TABLE contenuto(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    titolo varchar(500) NOT NULL,
    voto real DEFAULT 0 NOT NULL CHECK (voto >= 0 AND voto <= 5),
    trama text NOT NULL,
    paese varchar(50) NOT NULL,
    data_uscita date NOT NULL,
    tipo content_type NOT NULL,
    durata smallint NULL,
    CONSTRAINT pk_contenuto PRIMARY KEY (id)
);

CREATE TABLE ruolo(
    nome varchar(50) NOT NULL,
    CONSTRAINT pk_ruolo PRIMARY KEY (nome)
);

CREATE TABLE personaggio(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    biografia varchar(10000) NULL,
    data_nascita date NOT NULL,
    nome varchar(100) NOT NULL,
    paese varchar(100) NOT NULL,
    citta varchar(100) NOT NULL,
    foto bytea NULL,
    CONSTRAINT pk_personaggio PRIMARY KEY (id)
);

CREATE TABLE episodio(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    serie int NOT NULL REFERENCES contenuto, 
    numero int NOT NULL,
    stagione int NOT NULL,
    durata int NOT NULL,
    titolo varchar(500) NOT NULL,    
    CONSTRAINT pk_episodio PRIMARY KEY (id),
    UNIQUE (numero, stagione, serie)
);

CREATE TABLE partecipazione(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    id_contenuto int NOT NULL REFERENCES contenuto,
    id_personaggio int NOT NULL REFERENCES personaggio,
    ruolo varchar(50) NOT NULL REFERENCES ruolo,
    interpretazione varchar(100) NULL 
        CHECK(interpretazione IS NULL OR ruolo = 'attore'),
    CONSTRAINT pk_partecipazione PRIMARY KEY (id),
    UNIQUE (id_contenuto, id_personaggio, ruolo, interpretazione)
);

CREATE TABLE partecipazione_speciale(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    id_episodio int NOT NULL REFERENCES episodio,
    id_personaggio int NOT NULL REFERENCES personaggio,
    ruolo varchar(50) NOT NULL REFERENCES ruolo,
    interpretazione varchar(100) NULL,
    CONSTRAINT pk_partecipazione_speciale PRIMARY KEY (id),
    UNIQUE (id_episodio, id_personaggio, ruolo, interpretazione)
);

CREATE TABLE piattaforma(
    nome varchar(50) NOT NULL,
    is_online bit NOT NULL,
    CONSTRAINT pk_piattaforma PRIMARY KEY (nome)
);

CREATE TABLE genere(
    nome varchar(50) NOT NULL,
    CONSTRAINT pk_genere PRIMARY KEY (nome)
);

CREATE TABLE distributore(
    nome varchar(100) NOT NULL,
    CONSTRAINT pk_distributore PRIMARY KEY (nome)
);

CREATE TABLE produttore(
    nome varchar(100) NOT NULL,
    CONSTRAINT pk_produttore PRIMARY KEY (nome)
);

CREATE TABLE cinema(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    nome varchar(150) NOT NULL,
    indirizzo varchar(150) NOT NULL,
    paese varchar(100) NOT NULL,
    citta varchar(100) NOT NULL,
    email varchar(150) NULL,
    telefono varchar(20) NULL,
    fax varchar(20) NULL,
    CONSTRAINT pk_cinema PRIMARY KEY (id)
);

CREATE TABLE sala(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    numero int NOT NULL,
    id_cinema int NOT NULL REFERENCES cinema ON DELETE CASCADE,
    CONSTRAINT pk_Sala PRIMARY KEY (id)
);

CREATE TABLE contenuto_votazione(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    id_contenuto int NOT NULL REFERENCES contenuto ON DELETE CASCADE,
    username varchar(50) NULL REFERENCES utente ON DELETE SET NULL,
    voto smallint NOT NULL CHECK (voto >= 0 AND voto <= 5),
    CONSTRAINT pk_contenuto_votazione PRIMARY KEY (id),
    UNIQUE (id_contenuto, username)
);

CREATE TABLE contenuto_preferenza(
    id_contenuto int NOT NULL REFERENCES contenuto ON DELETE CASCADE,
    username varchar(50) NOT NULL REFERENCES utente ON DELETE CASCADE,
    CONSTRAINT pk_contenuto_preferenza PRIMARY KEY (id_contenuto, username)
);

CREATE TABLE contenuto_redazione(
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    id_contenuto int NOT NULL REFERENCES contenuto ON DELETE CASCADE,
    username varchar(50) NOT NULL REFERENCES utente ON DELETE SET NULL,
    data_inserimento timestamp  NOT NULL, 
    data_modifica timestamp  NULL CHECK(data_modifica is NULL OR data_modifica > data_inserimento), 
    CONSTRAINT pk_contenuto_redazione PRIMARY KEY (id)
);

CREATE TABLE contenuto_riproduzione(
    id_contenuto int NOT NULL REFERENCES contenuto ON DELETE CASCADE,
    piattaforma varchar(50) NOT NULL REFERENCES piattaforma ON DELETE CASCADE,
    hyperlink varchar(500) NULL,
    CONSTRAINT pk_contenuto_riproduzione PRIMARY KEY (id_contenuto, piattaforma)
);

CREATE TABLE contenuto_genere(
    id_contenuto int NOT NULL REFERENCES contenuto ON DELETE CASCADE,
    genere varchar(50) NOT NULL REFERENCES genere ON DELETE CASCADE,
    CONSTRAINT pk_contenuto_genere PRIMARY KEY (id_contenuto, genere)
);

CREATE TABLE contenuto_distribuzione(
    id_contenuto int NOT NULL REFERENCES contenuto ON DELETE CASCADE,
    distributore varchar(100) NOT NULL REFERENCES distributore ON DELETE CASCADE,
    CONSTRAINT pk_contenuto_distribuzione PRIMARY KEY (id_contenuto, distributore)
);

CREATE TABLE contenuto_produzione(
    id_contenuto int NOT NULL REFERENCES contenuto ON DELETE CASCADE,
    produttore varchar(100) NOT NULL REFERENCES produttore ON DELETE CASCADE,
    CONSTRAINT pk_contenuto_produzione PRIMARY KEY (id_contenuto, produttore)
);

CREATE TABLE contenuto_proiezione(
    id_contenuto int NOT NULL REFERENCES contenuto ON DELETE CASCADE,
    id_sala int NOT NULL REFERENCES sala ON DELETE CASCADE,
    data_ora timestamp  NOT NULL,
    prezzo decimal(5, 2) NOT NULL,
    CONSTRAINT pk_contenuto_proiezione PRIMARY KEY (id_contenuto, id_sala, data_ora)
);


CREATE OR REPLACE FUNCTION update_content_rating_avg()
  RETURNS trigger AS
$BODY$
BEGIN
    UPDATE contenuto 
    SET voto = (
        select avg(voto)::real
        from contenuto_votazione
        where id_contenuto = NEW.id_contenuto
    )
    WHERE id = NEW.id_contenuto;

	RETURN NEW;
END;
$BODY$ LANGUAGE plpgsql;

CREATE TRIGGER update_rating
    AFTER INSERT ON contenuto_votazione
    FOR EACH ROW
    EXECUTE PROCEDURE update_content_rating_avg();

COMMIT;